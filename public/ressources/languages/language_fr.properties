home=Bienvenue
documentation=Documentation
overview=Vue générale
requireElaiJS=Require ElaiJS - AMD
requireElaiJS_menu=Require
configuration=Configuration
event=Evènement
webservice=Services web
widget=Widget
plugin=Plugin
renderer=Les Moteurs de rendues
renderer_menu=Les vues
navigation=Navigation
i18n=Internationalisation
i18n_menu=I18N
ressources=Ressources
mode=Mode
theme=Thème
storage=Stockage
helper=Helper
debugManager=Mode Debug
api=API
language=Langage
localisation=Localisation
download=Téléchargement
404=404 Not Found
404_full_description=Cette page est introuvable.
copyright=Copyright© {{year}} Bertholet Damien. Code sous license {{codeLicensed}}. Documentation sous license {{documentationLicensed}}.
loading=Chargement...
see_api=Voir API pour plus de détails
api_see_documentation=Pour plus d'informations, voir la documentation associée.
api_methods=Methodes
api_properties=Champs
api_type=Type
api_defaultValue=Valeur par défaut:
api_returns=Retour


api_helper_extractGetParams=Extrait les paramètres GET de page.
api_helper_extractGetParams_returns=Un Object contenant les clés et les valeurs extrait.
api_helper_extractParams=Extrait les paramètres d'une chaîne de caractère sous le format 'key1=value1&key2=value2&...'
api_helper_extractParams_returns=Un Object contenant les clés et les valeurs extrait-e-s.
api_helper_extractParams_string=La chaîne de caractères qui contient les valeurs à extraire.
api_helper_extractParams_trim=Si 'true', on enlève les espaces situés au début et à la fin de chaque clé et valeur.
api_helper_extractArray=Extrait un tableau à partir d'une chaîne de caractère sous le format 'value1,value2,...'
api_helper_extractArray_returns=Un tableau contenant les valeurs extraites.
api_helper_extractArray_string=La chaîne de caractères qui contient les valeurs à extraire.
api_helper_extractArray_trim=Si 'true', on enlève les espaces situés au début et à la fin de chaque valeur.
api_helper_isFunction=Indique si la variable est une Function.
api_helper_isFunction_returns=True si la variable est une Function, false sinon.
api_helper_isFunction_object=La variable à comparer.
api_helper_isObject=Indique si la variable est un Object.
api_helper_isObject_returns=True si la variable est un Object, false sinon.
api_helper_isObject_object=La variable à comparer.
api_helper_isEmail=Indique si la chaîne de caractère est un email valide.\
Attention: Tous les cas ne sont pas pris en compte dans cette vérification mais seulement les cas les plus courant.
api_helper_isEmail_returns=True si la chaîne de caractère est un Email, false sinon.
api_helper_isEmail_email=La chaîne de caractère à comparer.
api_helper_getElaiJSAttribute=Extrait un paramètre passé en tant qu'attribut dans la balise qui a la class 'elaiJS'.
api_helper_getElaiJSAttribute_returns=La valeur de l'attribut correspondant ; undefined si non définit.
api_helper_getElaiJSAttribute_name=Le nom de l'attribut. L'attribut devrait être de la forme "data-{{name}}".
api_helper_clone=Clone un object.\
Pour des raisons de simplification, ce sont les méthodes JSON.parse et JSON.stringify qui ont été utilisé pour réaliser la copie.\
Attention: Ceci peut causer des problèmes de performances pour les gros objects.\
Attention2: Les objects contenant des fonctions ne pourront être copié à cause de la nature de la copie.
api_helper_clone_returns=L'object copié.
api_helper_clone_obj=L'object à copier.
api_helper_parseJSON=Parse une chaîne de caractères en Object grâce à la méthode "JSON.parse". Ceci offre juste un try catch autour de cette méthode à fin de lisibilité du code.
api_helper_parseJSON_returns=L'object parsé.
api_helper_parseJSON_string=La chaîne de caractères à parser.
api_helper_capitalize=Met la première lettre de la chaîne de caractère en majuscule.
api_helper_capitalize_returns=La chaîne de caractère capitalisée.
api_helper_capitalize_string=La chaîne de caractère à capitaliser.
api_helper_equals=Indique si deux objects sont identiques.
api_helper_equals_returns=True si la chaîne de caractère est un Email, false sinon.
api_helper_equals_obj1=Le premier object à comparer.
api_helper_equals_obj2=Le deuxième object à comparer.
api_helper_equals_strict=Indique si on fait une comparaison stricte ou non.\
Une comparaison stricte distinguera "42" de 42, donc utilisera le comparateur == et non === pour comparer les variables non object.\
De plus, la comparaison stricte distinguera un object avec un champs undefined et un object vide.\
Exemple: {test: 42, example: undefined} et {test: "42"} seront différent dans un mode strict et égaux dans un mode non stricte.


api_event_bindGlobal=Attache un évènement 'global'.
api_event_bindGlobal_type=Le type de l'évènement.
api_event_bindGlobal_callback=La fonction de callback qui sera appelé quand l'évènement sera déclenché.
api_event_bindGlobal_params=Les paramètres qui seront passés à la fonction de callback.
api_event_bindGlobal_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_event_bindGlobal_bindOne=Indique si l'attachement dure le temps d'un seul évènement.
api_event_bindOneGlobal=Attache un évènement 'global' pour le prochain évènement déclenché.
api_event_bindOneGlobal_type=Le type de l'évènement.
api_event_bindOneGlobal_callback=La fonction de callback qui sera appelé quand l'évènement sera déclenché.
api_event_bindOneGlobal_params=Les paramètres qui seront passés à la fonction de callback.
api_event_bindOneGlobal_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_event_unbindGlobal=Détache un évènement 'global'.
api_event_unbindGlobal_type=Le type de l'évènement.
api_event_unbindGlobal_callback=La fonction de callback utilisé intialement lors de l'attachement de l'évènement. Si non spécifié, tous les attachements du type donné seront détachés.
api_event_unbindAllGlobal=Détache tous les évènements sur l'object 'global'.
api_event_fireGlobal=Déclenche un évènement 'global'.
api_event_fireGlobal_event=Le type de l'évènement ou un object de la forme '{ type: event, data: data }' qui peut contenir des champs sur mesure.
api_event_fireGlobal_data=Les données relatives à l'évènement.
api_event_buildGlobalFireCallBack=Construit une fonction déclenchera un évènement 'global' et appelera le callback.
api_event_buildGlobalFireCallBack_event=Le type de l'évènement ou un object de la forme '{ type: event, data: data }' qui peut contenir des champs sur mesure.
api_event_buildGlobalFireCallBack_callback=La fonction de callback qui sera appelé après le déclechement de l'évènement.
api_event_buildGlobalFireCallBack_data=Les données relatives à l'évènement.
api_event_buildGlobalFireCallBack_returns=La fonction construite.
api_event_bind=Attache un évènement à l'object dans le scope actuel, la valeur 'this'.
api_event_bind_type=Le type de l'évènement.
api_event_bind_callback=La fonction de callback qui sera appelé quand l'évènement sera déclenché.
api_event_bind_params=Les paramètres qui seront passés à la fonction de callback.
api_event_bind_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_event_bind_bindOne=Indique si l'attachement dure le temps d'un seul évènement.
api_event_bind_returns=L'object dans le scope.
api_event_bindOne=Attache un évènement à l'object dans le scope actuel, la valeur 'this', pour le prochain évènement déclenché.
api_event_bindOne_type=Le type de l'évènement.
api_event_bindOne_callback=La fonction de callback qui sera appelé quand l'évènement sera déclenché.
api_event_bindOne_params=Les paramètres qui seront passés à la fonction de callback.
api_event_bindOne_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_event_bindOne_returns=L'object dans le scope.
api_event_unbind=Détache un évènement de l'object dans le scope actuel, la valeur 'this'.
api_event_unbind_type=Le type de l'évènement.
api_event_unbind_callback=La fonction de callback utilisé intialement lors de l'attachement de l'évènement. Si non spécifié, tous les attachements du type donné seront détachés.
api_event_unbind_returns=L'object dans le scope.
api_event_unbindAll=Détache tous les évènements de l'object dans le scope actuel, la valeur 'this'.
api_event_unbindAll_returns=L'object dans le scope.
api_event_fire=Déclenche un évènement sur l'object dans le scope actuel, la valeur 'this'.
api_event_fire_event=Le type de l'évènement ou un object de la forme '{ type: event, data: data }' qui peut contenir des champs sur mesure.
api_event_fire_data=Les données relatives à l'évènement.
api_event_fire_returns=L'object dans le scope.
api_event_buildEvent=Construit un Object qui représente un évènement.
api_event_buildEvent_event=Le type de l'évènement ou un object de la forme '{ type: event, data: data }' qui peut contenir des champs sur mesure.
api_event_buildEvent_data=Les données relatives à l'évènement.
api_event_buildEvent_returns=L'object qui représente l'évènement.
api_event_buildFireCallBack=Construit une fonction déclenchera un évènement sur l'object source et appelera le callback.
api_event_buildFireCallBack_source=L'object qui sera la source de l'évènement.
api_event_buildFireCallBack_event=Le type de l'évènement ou un object de la forme '{ type: event, data: data }' qui peut contenir des champs sur mesure.
api_event_buildFireCallBack_callback=La fonction de callback qui sera appelé après le déclechement de l'évènement.
api_event_buildFireCallBack_data=Les données relatives à l'évènement.
api_event_buildFireCallBack_returns=La fonction construite.
api_event_addBindFunctions=Ajoute les fonctions suivantes à l'object scope: bind, bindOne, unbind, unbinAll.
api_event_addBindFunctions_scope=L'object sur lequel les fonctions seront ajoutées.
api_event_addFunctions=Ajoute les fonctions suivantes à l'object scope: bind, bindOne, unbind, unbinAll, fire.
api_event_addFunctions_scope=L'object sur lequel les fonctions seront ajoutées.
api_event_addAllFunctions=Ajoute les fonctions suivantes à l'object scope: bind, bindOne, unbind, unbinAll, fire, fireGlobal, bindGlobal; bindOneGlobal, unbindGlobal.
api_event_addAllFunctions_scope=L'object sur lequel les fonctions seront ajoutées.


api_webservice_addService=Ajoute un service.
api_webservice_addService_name=Le nom du service à ajouter.
api_webservice_addService_executeFonction=La fonction qui exécute le service.
api_webservice_addService_defaultServiceParams=Les paramètres par défaut du service.
api_webservice_addService_returns=Le module WebService.
api_webservice_setDefaultServiceParams=Change les paramètres par défaut du service.
api_webservice_setDefaultServiceParams_name=Le nom du service.
api_webservice_setDefaultServiceParams_defaultServiceParams=Les paramètres par défaut du service.
api_webservice_setDefaultServiceParams_returns=Le module WebService.
api_webservice_addBeforeListener=Ajoute un listener qui sera exécuté avant le service.
api_webservice_addBeforeListener_name=Le nom du service.
api_webservice_addBeforeListener_callback=La fonction de callback qui sera appelé lors de l'appel à ce service.
api_webservice_addBeforeListener_returns=Le module WebService.
api_webservice_addAfterListener=Ajoute un listener qui sera exécuté après le service.
api_webservice_addAfterListener_name=Le nom du service.
api_webservice_addAfterListener_callback=La fonction de callback qui sera appelé lors de l'appel à ce service.
api_webservice_addAfterListener_returns=Le module WebService.
api_webservice_removeBeforeListener=Supprime le listener "before" qui est associé à ce service et ce callback. S'il n'y a pas de callback définit, cela supprime tous les listeners "before" associés.
api_webservice_removeBeforeListener_name=Le nom du service.
api_webservice_removeBeforeListener_callback=Le callback associé.
api_webservice_removeBeforeListener_returns=Le module WebService.
api_webservice_removeAfterListener=Supprime le listener "after" qui est associé à ce service et ce callback. S'il n'y a pas de callback définit, cela supprime tous les listeners "after" associés.
api_webservice_removeAfterListener_name=Le nom du service.
api_webservice_removeAfterListener_callback=Le callback associé.
api_webservice_removeAfterListener_returns=Le module WebService.
api_webservice_addBeforeInterceptor=Ajoute un intercepteur qui sera exécuté avant le service.
api_webservice_addBeforeInterceptor_name=Le nom du service.
api_webservice_addBeforeInterceptor_callback=La fonction de callback qui sera appelé lors de l'appel à ce service.
api_webservice_addBeforeInterceptor_returns=Le module WebService.
api_webservice_addAfterInterceptor=Ajoute un intercepteur qui sera exécuté après le service.
api_webservice_addAfterInterceptor_name=Le nom du service.
api_webservice_addAfterInterceptor_callback=La fonction de callback qui sera appelé lors de l'appel à ce service.
api_webservice_addAfterInterceptor_returns=Le module WebService.
api_webservice_removeBeforeInterceptor=Supprime l'interceptor "before" qui est associé à ce service et ce callback. S'il n'y a pas de callback définit, cela supprime tous les interceptors "before" associés.
api_webservice_removeBeforeInterceptor_name=Le nom du service.
api_webservice_removeBeforeInterceptor_callback=Le callback associé.
api_webservice_removeBeforeInterceptor_returns=Le module WebService.
api_webservice_removeAfterInterceptor=Supprime l'interceptor "after" qui est associé à ce service et ce callback. S'il n'y a pas de callback définit, cela supprime tous les interceptors "after" associés.
api_webservice_removeAfterInterceptor_name=Le nom du service.
api_webservice_removeAfterInterceptor_callback=Le callback associé.
api_webservice_removeAfterInterceptor_returns=Le module WebService.


api_ressources_get=Transforme la valeurde la ressource donnée en paramètre en chaîne de caractères grâce aux ressources définies.
api_ressources_get_name=Le nom de la ressource à exécuter.
api_ressources_get_params=Les paramètres pour les ressources.
api_ressources_get_ressourcesList=La liste des ressources.
api_ressources_get_returns=La chaîne de caractère calculée à partir de la ressource.
api_ressources_execute=Transforme la valeur en paramètre en chaîne de caractères grâce aux ressources définies.
api_ressources_execute_value=La valeur à éxécuter.
api_ressources_execute_params=Les paramètres pour les ressources.
api_ressources_execute_ressourcesList=La liste des ressources.
api_ressources_execute_returns=La chaîne de caractère calculée à partir de la valeur.


api_theme_getTheme=Indique le thème courant.
api_theme_getTheme_returns=Le nom du thème courant.
api_theme_initialize=Initialize le thème par défault. Cette fonction appelle 'setTheme' avec comme thème le thème choisit dans la configuration suivantes: 'config.elaiJS.defaultTheme'. Initialize ne fera rien si cette configuration n'est pas définie.
api_theme_initialize_callback=La fonction de callback qui sera appelé une fois le thème définit.
api_theme_initialize_errCallback=La fonction d'erreur de callback qui sera appelé si l'application du thème échoue.
api_theme_setTheme=Définit le thème de l'application.
api_theme_setTheme_theme=Le nom du thème souhaité.
api_theme_setTheme_callback=La fonction de callback qui sera appelé une fois le thème définit.
api_theme_setTheme_errCallback=La fonction d'erreur de callback qui sera appelé si l'application du thème échoue.


api_storage_get=Retourne la variable stocké avec le nom et le path définis.
api_storage_get_name=La nom associé à la variable.
api_storage_get_path=Le chemin à utiliser.
api_storage_get_returns=La variable associé ; undefined si null trouvé.
api_storage_set=Stocke une variable avec le nom, la valeur et le path définis.
api_storage_set_name=La nom qui sera associé à la variable.
api_storage_set_value=La valeur de la variable.
api_storage_set_path=Le chemin à utiliser.
api_storage_set_returns=Le module de Storage.
api_storage_remove=Supprimer le stockage d'une seule variable.
api_storage_remove_name=La nom associé à la variable.
api_storage_remove_path=Le chemin à utiliser.
api_storage_remove_returns=Le module de Storage.
api_storage_clearAll=Supprime tous les stockages de tous les chemins.
api_storage_clearAll_returns=Le module de Storage.
api_storage_clear=Supprime tous les stockages du chemin spécifier.
api_storage_clear_path=Le chemin à utiliser.
api_storage_clear_returns=Le module de Storage.
api_storage_bindCurrentTab=Attache un évènement de changement à la variable spécifiée sur l'onglet courant.\
Si un changement survient sur l'onglet courant, le callback sera appelé. Si un changement survient sur un autre onglet, le callback ne sera pas appelé.
api_storage_bindCurrentTab_name=La nom associé à la variable.
api_storage_bindCurrentTab_callback=La fonction de callback qui sera appelé quand la variable sera modifié.
api_storage_bindCurrentTab_path=Le chemin à utiliser.
api_storage_bindCurrentTab_params=Les paramètres qui seront passés à la fonction de callback.
api_storage_bindCurrentTab_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_storage_bindCurrentTab_bindOne=Indique si l'attachement dure le temps d'une seule modification.
api_storage_bindCurrentTab_returns=Le module de Storage.
api_storage_bindOneCurrentTab=Attache un évènement de changement à la variable spécifiée sur l'onglet courant pour la prochaine modification seulement.\
Si un changement survient sur l'onglet courant, le callback sera appelé. Si un changement survient sur un autre onglet, le callback ne sera pas appelé.
api_storage_bindOneCurrentTab_name=La nom associé à la variable.
api_storage_bindOneCurrentTab_callback=La fonction de callback qui sera appelé quand la variable sera modifié.
api_storage_bindOneCurrentTab_path=Le chemin à utiliser.
api_storage_bindOneCurrentTab_params=Les paramètres qui seront passés à la fonction de callback.
api_storage_bindOneCurrentTab_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_storage_bindOneCurrentTab_returns=Le module de Storage.
api_storage_unbindCurrentTab=Détache un évènement de changement associé à la variable spécifiée sur l'onglet courant.
api_storage_unbindCurrentTab_name=La nom associé à la variable.
api_storage_unbindCurrentTab_callback=La fonction de callback utilisé intialement lors de l'attachement de l'évènement. Si non spécifié, tous les attachements sur cette variable seront détachés.
api_storage_unbindCurrentTab_path=Le chemin à utiliser.
api_storage_unbindCurrentTab_returns=Le module de Storage.
api_storage_bind=Attache un évènement de changement à la variable spécifiée sur les onglets non courant.\
Si un changement survient sur l'onglet courant, le callback ne sera pas appelé. Si un changement survient sur un autre onglet, le callback sera appelé.
api_storage_bind_name=La nom associé à la variable.
api_storage_bind_callback=La fonction de callback qui sera appelé quand la variable sera modifié.
api_storage_bind_path=Le chemin à utiliser.
api_storage_bind_params=Les paramètres qui seront passés à la fonction de callback.
api_storage_bind_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_storage_bind_bindOne=Indique si l'attachement dure le temps d'une seule modification.
api_storage_bind_returns=Le module de Storage.
api_storage_bindOne=Attache un évènement de changement à la variable spécifiée sur les onglets non courant pour la prochaine modification seulement.\
Si un changement survient sur l'onglet courant, le callback ne sera pas appelé. Si un changement survient sur un autre onglet, le callback sera appelé.
api_storage_bindOne_name=La nom associé à la variable.
api_storage_bindOne_callback=La fonction de callback qui sera appelé quand la variable sera modifié.
api_storage_bindOne_path=Le chemin à utiliser.
api_storage_bindOne_params=Les paramètres qui seront passés à la fonction de callback.
api_storage_bindOne_scope=Le scope qui sera utilisé pour appeler la fonction de callback.
api_storage_bindOne_returns=Le module de Storage.
api_storage_unbind=Détache un évènement de changement associé à la variable spécifiée sur les onglets non courant.
api_storage_unbind_name=La nom associé à la variable.
api_storage_unbind_callback=La fonction de callback utilisé intialement lors de l'attachement de l'évènement. Si non spécifié, tous les attachements sur cette variable seront détachés.
api_storage_unbind_path=Le chemin à utiliser.
api_storage_unbind_returns=Le module de Storage.
api_storage_unbindAll=Détache tous les évènements de toutes les variables pour tous les chemins pour tous types d'évènements.
api_storage_unbindAll_returns=Le module de Storage.