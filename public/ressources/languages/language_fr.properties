home=Bienvenue
documentation=Documentation
overview=Vue générale
requireElaiJS=Require ElaiJS - AMD
requireElaiJS_menu=Require
configuration=Configuration
event=Evènement
webservice=Services web
widget=Widget
plugin=Plugin
renderer=Les Moteurs de rendues
renderer_menu=Les vues
navigation=Navigation
i18n=Internationalisation
i18n_menu=I18N
ressources=Ressources
mode=Mode
theme=Theme
storage=Stockage
helper=Helper
debugManager=Mode Debug
api=API
language=Language
localisation=Localisation
download=Téléchargement
404=404 Not Found
404_full_description=Cette page est introuvable.
copyright=Copyright© {{year}} Bertholet Damien. Code sous license {{codeLicensed}}. Documentation sous license {{documentationLicensed}}.
loading=Chargement...
see_api=Voir API pour plus de détails
api_methods=Methodes
api_properties=Champs
api_type=Type
api_returns=Retour
api_helper=
api_helper_extractGetParams=Extrait les paramètres GET de page.
api_helper_extractGetParams_returns=Un Object contenant les clés et les valeurs extrait.
api_helper_extractParams=Extrait les paramètres d'une chaîne de caractère sous le format 'key1=value1&key2=value2&...'
api_helper_extractParams_returns=Un Object contenant les clés et les valeurs extrait-e-s.
api_helper_extractParams_string=La chaîne de caractères qui contient les valeurs à extraire.
api_helper_extractParams_trim=Si 'true', on enlève les espaces situés au début et à la fin de chaque clé et valeur.
api_helper_extractArray=Extrait un tableau à partir d'une chaîne de caractère sous le format 'value1,value2,...'
api_helper_extractArray_returns=Un tableau contenant les valeurs extraites.
api_helper_extractArray_string=La chaîne de caractères qui contient les valeurs à extraire.
api_helper_extractArray_trim=Si 'true', on enlève les espaces situés au début et à la fin de chaque valeur.
api_helper_isFunction=Indique si la variable est une Function.
api_helper_isFunction_returns=True si la variable est une Function, false sinon.
api_helper_isFunction_object=La variable à comparer.
api_helper_isObject=Indique si la variable est un Object.
api_helper_isObject_returns=True si la variable est un Object, false sinon.
api_helper_isObject_object=La variable à comparer.
api_helper_isEmail=Indique si la chaîne de caractère est un email valide.\
Attention: Tous les cas ne sont pas pris en compte dans cette vérification mais seulement les cas les plus courant.
api_helper_isEmail_returns=True si la chaîne de caractère est un Email, false sinon.
api_helper_isEmail_email=La chaîne de caractère à comparer.
api_helper_getElaiJSAttribute=Extrait un paramètre passé en tant qu'attribut dans la balise qui a la class 'elaiJS'.
api_helper_getElaiJSAttribute_returns=La valeur de l'attribut correspondant ; undefined si non définit.
api_helper_getElaiJSAttribute_name=Le nom de l'attribut. L'attribut devrait être de la forme "data-{{name}}".
api_helper_clone=Clone un object.\
Pour des raisons de simplification, ce sont les méthodes JSON.parse et JSON.stringify qui ont été utilisé pour réaliser la copie.\
Attention: Ceci peut causer des problèmes de performances pour les gros objects.\
Attention2: Les objects contenant des fonctions ne pourront être copié à cause de la nature de la copie.
api_helper_clone_returns=L'object copié.
api_helper_clone_obj=L'object à copier.
api_helper_parseJSON=Parse une chaîne de caractères en Object grâce à la méthode "JSON.parse". Ceci offre juste un try catch autour de cette méthode à fin de lisibilité du code.
api_helper_parseJSON_returns=L'object parsé.
api_helper_parseJSON_string=La chaîne de caractères à parser.
api_helper_capitalize=Met la première lettre de la chaîne de caractère en majuscule.
api_helper_capitalize_returns=La chaîne de caractère capitalisée.
api_helper_capitalize_string=La chaîne de caractère à capitaliser.
api_helper_equals=Indique si deux objects sont identiques.
api_helper_equals_returns=True si la chaîne de caractère est un Email, false sinon.
api_helper_equals_obj1=Le premier object à comparer.
api_helper_equals_obj2=Le deuxième object à comparer.
api_helper_equals_strict=Indique si on fait une comparaison stricte ou non.\
Une comparaison stricte distinguera "42" de 42, donc utilisera le comparateur == et non === pour comparer les variables non object.\
De plus, la comparaison stricte distinguera un object avec un champs undefined et un object vide.\
Exemple: {test: 42, example: undefined} et {test: "42"} seront différent dans un mode strict et égaux dans un mode non stricte.